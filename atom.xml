<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gre的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-28T00:39:58.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhanggdong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/06/19/hello-world/"/>
    <id>http://yoursite.com/2018/06/19/hello-world/</id>
    <published>2018-06-19T08:29:41.720Z</published>
    <updated>2017-10-28T00:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>elasticsearch源码分析(一)--启动</title>
    <link href="http://yoursite.com/2018/05/26/elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%BA%8C)--%E5%90%AF%E5%8A%A8/"/>
    <id>http://yoursite.com/2018/05/26/elasticsearch源码分析(二)--启动/</id>
    <published>2018-05-26T04:12:57.000Z</published>
    <updated>2018-06-21T09:18:52.801Z</updated>
    
    <content type="html"><![CDATA[<p>由于最近半年来一直在使用Elasticsearch来做全文检索和ELK统一日志工作，对于ES还是觉得需要细细研究，才能感受到它的魅力，才能有所提高。</p><p>我们先提出几个问题：</p><ul><li>启动入口在哪个类？</li><li>启动需要做哪些初始化工作？</li><li>如何加载配置文件？</li></ul><h4 id="一、怎么找启动入口在哪个类"><a href="#一、怎么找启动入口在哪个类" class="headerlink" title="一、怎么找启动入口在哪个类"></a>一、怎么找启动入口在哪个类</h4><p>看源码最头疼的事情就是找入口，相信很多刚开始也是这样，面对那么多模块中的类，很难找到一个切入点，我刚开始看也是这样，对于这样的问题，其实还是自己的积累不够，多学习就是了。</p><p>我们先来看看启动的脚本elasticsearch.bat或者elasticsearch.sh</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">忽略其他</span><br><span class="line"></span><br><span class="line"><span class="variable">%JAVA%</span> <span class="variable">%ES_JAVA_OPTS%</span> <span class="variable">%ES_PARAMS%</span> -cp "<span class="variable">%ES_CLASSPATH%</span>" "org.elasticsearch.bootstrap.Elasticsearch" <span class="variable">!newparams!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ENDLOCAL</span></span><br></pre></td></tr></table></figure><p>看到了org.elasticsearch.bootstrap.Elasticsearch这个类，不用想就是它的启动类。</p><h4 id="二、Elasticsearch类做了什么事情"><a href="#二、Elasticsearch类做了什么事情" class="headerlink" title="二、Elasticsearch类做了什么事情"></a>二、Elasticsearch类做了什么事情</h4><p>我们先来猜想一下，我们下载完Elasticsearch的安装包，一般有两种部署方式：单机部署和集群部署</p><h5 id="2-1-单机部署"><a href="#2-1-单机部署" class="headerlink" title="2.1 单机部署"></a>2.1 单机部署</h5><p>一般我们会修改{Elasticsearch_home}\config下的elasticsearch.yml文件和jvm.options</p><p>在elasticsearch.yml中配置集群名称、节点名称、日志存放路径、数据存放路径、网络IP、http端口（9200）、Netty端口（9300）等</p><p>同时还会去初始化一些module，如下图</p><p><img src="F:\hexo\source\images\es\es单机启动.png" alt=":\hexo\source\images\es\es单机启动.pn"></p><h5 id="2-2-集群部署"><a href="#2-2-集群部署" class="headerlink" title="2.2 集群部署"></a>2.2 集群部署</h5><p>我们会在单机部署的基础上，增加Discovery模块（集群发现）的配置、</p><p>有哪些节点参与到集群当中：discovery.zen.ping.unicast.hosts: [“host1”, “host2”]</p><p>需要有几个皇子在场才可以选举投票出master：discovery.zen.minimum_master_nodes: 3</p><h5 id="2-3-启动流程猜想"><a href="#2-3-启动流程猜想" class="headerlink" title="2.3 启动流程猜想"></a>2.3 启动流程猜想</h5><p>通过上述分析我们知道，ES集群启动会做一些初始化工作、加载配置文件，加载一下扩展插件，如果是集群启动，还会进行master选举，master选举需要有足够多的节点参与投票，这个参数是可以指定。</p><h4 id="三、启动源码分析"><a href="#三、启动源码分析" class="headerlink" title="三、启动源码分析"></a>三、启动源码分析</h4><h5 id="3-1-Elasticsearch类图"><a href="#3-1-Elasticsearch类图" class="headerlink" title="3.1 Elasticsearch类图"></a>3.1 Elasticsearch类图</h5><p><img src="F:\hexo\source\images\es\Elasticsearch类图.png" alt=":\hexo\source\images\es\Elasticsearch类图.pn"></p><h5 id="3-2-Elasticsearch-main-方法"><a href="#3-2-Elasticsearch-main-方法" class="headerlink" title="3.2 Elasticsearch#main()方法"></a>3.2 Elasticsearch#main()方法</h5><p>我们先来看看org.elasticsearch.bootstrap.Elasticsearch#main()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// we want the JVM to think there is a security manager installed so that if internal policy decisions that would be based on the</span></span><br><span class="line">        <span class="comment">// presence of a security manager or lack thereof act as if there is a security manager present (e.g., DNS cache policy)</span></span><br><span class="line">        System.setSecurityManager(<span class="keyword">new</span> SecurityManager() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPermission</span><span class="params">(Permission perm)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// grant all permissions so that we can later set the security manager to the one that we want</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        LogConfigurator.registerErrorListener();</span><br><span class="line">        <span class="comment">// 调用构造器</span></span><br><span class="line">        <span class="keyword">final</span> Elasticsearch elasticsearch = <span class="keyword">new</span> Elasticsearch();</span><br><span class="line">        <span class="comment">// 调用main方法，执行完后返回一个状态</span></span><br><span class="line">        <span class="keyword">int</span> status = main(args, elasticsearch, Terminal.DEFAULT);</span><br><span class="line">        <span class="comment">// 判断状态是否启动成功</span></span><br><span class="line">        <span class="keyword">if</span> (status != ExitCodes.OK) &#123;</span><br><span class="line">            exit(status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args, <span class="keyword">final</span> Elasticsearch elasticsearch, <span class="keyword">final</span> Terminal terminal)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elasticsearch.main(args, terminal);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过上面的类图关系，我们知道Elasticsearch是一个Command，就是一开始先设置了一个SecurityManager，做一些检查checkPermission(Permission perm)，因此主要还是增加一些启停的hook，配置日志输出，用意看注释吧，接着打印了一些基本参数后则进入<code>init</code>方法，在Command#execute(terminal, options)方法里会调用<code>Bootstrap.init(!daemonize, pidFile, quiet, initialEnv);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">main</span><span class="params">(String[] args, Terminal terminal)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (addShutdownHook()) &#123;</span><br><span class="line">            shutdownHookThread.set(<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException e) &#123;</span><br><span class="line">                    <span class="keyword">try</span> (</span><br><span class="line">                        StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line">                        PrintWriter pw = <span class="keyword">new</span> PrintWriter(sw)) &#123;</span><br><span class="line">                        e.printStackTrace(pw);</span><br><span class="line">                        terminal.println(sw.toString());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException impossible) &#123;</span><br><span class="line">                        <span class="comment">// StringWriter#close declares a checked IOException from the Closeable interface but the Javadocs for StringWriter</span></span><br><span class="line">                        <span class="comment">// say that an exception here is impossible</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(impossible);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">            <span class="comment">// 当JVM关闭时，会执行系统中已经设置的所有通过方法addShutdownHook添加的钩子，</span></span><br><span class="line">            <span class="comment">// 当系统执行完这些钩子后，jvm才会关闭</span></span><br><span class="line">            Runtime.getRuntime().addShutdownHook(shutdownHookThread.get());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>配置日志输出Command#main()方法中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 配置日志输出</span><br><span class="line">// initialize default for es.logger.level because we will not read the log4j2.properties</span><br><span class="line">final String loggerLevel = System.getProperty(&quot;es.logger.level&quot;, Level.INFO.name());</span><br><span class="line">final Settings settings = Settings.builder().put(&quot;logger.level&quot;, loggerLevel).build();</span><br><span class="line">LogConfigurator.configureWithoutConfig(settings);</span><br></pre></td></tr></table></figure><p>LogConfigurator#configureWithoutConfig()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">configureWithoutConfig</span><span class="params">(<span class="keyword">final</span> Settings settings)</span> </span>&#123;</span><br><span class="line">     Objects.requireNonNull(settings);</span><br><span class="line">     <span class="comment">// we initialize the status logger immediately otherwise Log4j will complain when we try to get the context</span></span><br><span class="line">     configureStatusLogger();</span><br><span class="line">     configureLoggerLevels(settings);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在Command#mainWithoutErrorHandling(args, terminal)中执行Command，同时会抛出所有的异常给Command#main()方法，真正调用execute(terminal, options)方法执行操作，这是一个抽象方法，通过我们的类图,它的实现类应该是EnvironmentAwareCommand#execute()</p><p><img src="F:\hexo\source\images\es\Command-execute实现类.png" alt=":\hexo\source\images\es\Command-execute实现类.pn"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Terminal terminal, OptionSet options)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将配置信息设置到HashMap中</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, String&gt; settings = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> KeyValuePair kvp : settingOption.values(options)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (kvp.value.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, <span class="string">"setting ["</span> + kvp.key + <span class="string">"] must not be empty"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (settings.containsKey(kvp.key)) &#123;</span><br><span class="line">                <span class="keyword">final</span> String message = String.format(</span><br><span class="line">                        Locale.ROOT,</span><br><span class="line">                        <span class="string">"setting [%s] already set, saw [%s] and [%s]"</span>,</span><br><span class="line">                        kvp.key,</span><br><span class="line">                        settings.get(kvp.key),</span><br><span class="line">                        kvp.value);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, message);</span><br><span class="line">            &#125;</span><br><span class="line">            settings.put(kvp.key, kvp.value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查了elasticsearch的三个环境参数：</span></span><br><span class="line">        putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.conf"</span>, <span class="string">"es.path.conf"</span>);</span><br><span class="line">        putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.data"</span>, <span class="string">"es.path.data"</span>);</span><br><span class="line">        putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.home"</span>, <span class="string">"es.path.home"</span>);</span><br><span class="line">        putSystemPropertyIfSettingIsMissing(settings, <span class="string">"path.logs"</span>, <span class="string">"es.path.logs"</span>);</span><br><span class="line">        <span class="comment">// 调用execute方法</span></span><br><span class="line">        execute(terminal, options, createEnv(terminal, settings));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该方法也是一个抽象方法，它有很多实现类</p><p><img src="F:\hexo\source\images\es\EnvironmentAwareCommand-execute方法实现类.png" alt=":\hexo\source\images\es\EnvironmentAwareCommand-execute方法实现类.pn"></p><p>在该方法中，会先调用createEnv(terminal, settings)设置环境参数，使用该方法来加载配置文件信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Create an &#123;<span class="doctag">@link</span> Environment&#125; for the command to use. Overrideable for tests. */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Environment <span class="title">createEnv</span><span class="params">(Terminal terminal, Map&lt;String, String&gt; settings)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> InternalSettingsPreparer.prepareEnvironment(Settings.EMPTY, terminal, settings);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>那么这些配置信息怎么跟节点信息关联呢？</p><h5 id="3-3-Elasticsearch-execute-方法"><a href="#3-3-Elasticsearch-execute-方法" class="headerlink" title="3.3 Elasticsearch#execute()方法"></a>3.3 Elasticsearch#execute()方法</h5><p>直接来看Elasticsearch#execute()方法做了什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Terminal terminal, OptionSet options, Environment env)</span> <span class="keyword">throws</span> UserException </span>&#123;</span><br><span class="line">        <span class="comment">// 检查参数是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (options.nonOptionArguments().isEmpty() == <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, <span class="string">"Positional arguments not allowed, found "</span> + options.nonOptionArguments());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (options.has(versionOption)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (options.has(daemonizeOption) || options.has(pidfileOption)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.USAGE, <span class="string">"Elasticsearch version option is mutually exclusive with any other option"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            terminal.println(<span class="string">"Version: "</span> + org.elasticsearch.Version.CURRENT</span><br><span class="line">                    + <span class="string">", Build: "</span> + Build.CURRENT.shortHash() + <span class="string">"/"</span> + Build.CURRENT.date()</span><br><span class="line">                    + <span class="string">", JVM: "</span> + JvmInfo.jvmInfo().version());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 是否以守护线程启动（后台启动 -d）</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> daemonize = options.has(daemonizeOption);</span><br><span class="line">        <span class="comment">// 进程文件</span></span><br><span class="line">        <span class="keyword">final</span> Path pidFile = pidfileOption.value(options);</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> quiet = options.has(quietOption);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行初始化方法</span></span><br><span class="line">            init(daemonize, pidFile, quiet, env);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NodeValidationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserException(ExitCodes.CONFIG, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该方法主要是检查一些参数，然后调用Elasticsearch#init(daemonize, pidFile, quiet, env)方法，在方法里会调用<code>Bootstrap.init(!daemonize, pidFile, quiet, initialEnv)</code>，而这个方法才是Elasticsearch真正去启动ES。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is invoked by &#123;<span class="doctag">@link</span> Elasticsearch#main(String[])&#125; to startup elasticsearch.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> <span class="keyword">boolean</span> foreground,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> Path pidFile,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> <span class="keyword">boolean</span> quiet,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> Environment initialEnv)</span> <span class="keyword">throws</span> BootstrapException, NodeValidationException, UserException </span>&#123;</span><br><span class="line">        <span class="comment">// Set the system property before anything has a chance to trigger its use</span></span><br><span class="line">        initLoggerPrefix();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// force the class initializer for BootstrapInfo to run before</span></span><br><span class="line">        <span class="comment">// the security manager is installed</span></span><br><span class="line">        BootstrapInfo.init();</span><br><span class="line"></span><br><span class="line">        INSTANCE = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        <span class="keyword">final</span> SecureSettings keystore = loadSecureSettings(initialEnv);</span><br><span class="line">        Environment environment = createEnvironment(foreground, pidFile, keystore, initialEnv.settings());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 配置日志输出</span></span><br><span class="line">            LogConfigurator.configure(environment);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查自定义配置文件</span></span><br><span class="line">        checkForCustomConfFile();</span><br><span class="line">        <span class="comment">// 检查是否配置错误</span></span><br><span class="line">        checkConfigExtension(environment.configExtension());</span><br><span class="line">        <span class="comment">// 如果pidFile文件不为空，则创建pid文件，会在磁盘上持久化一个记录应用pid的文件</span></span><br><span class="line">        <span class="keyword">if</span> (environment.pidFile() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                PidFile.create(environment.pidFile(), <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过参数foreground和quiet来控制日志输出</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> closeStandardStreams = (foreground == <span class="keyword">false</span>) || quiet;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (closeStandardStreams) &#123;</span><br><span class="line">                <span class="keyword">final</span> Logger rootLogger = ESLoggerFactory.getRootLogger();</span><br><span class="line">                <span class="keyword">final</span> Appender maybeConsoleAppender = Loggers.findAppender(rootLogger, ConsoleAppender.class);</span><br><span class="line">                <span class="keyword">if</span> (maybeConsoleAppender != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Loggers.removeAppender(rootLogger, maybeConsoleAppender);</span><br><span class="line">                &#125;</span><br><span class="line">                closeSystOut();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// fail if somebody replaced the lucene jars</span></span><br><span class="line">            checkLucene();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// install the default uncaught exception handler; must be done before security is</span></span><br><span class="line">            <span class="comment">// initialized as we do not want to grant the runtime permission</span></span><br><span class="line">            <span class="comment">// setDefaultUncaughtExceptionHandler</span></span><br><span class="line">            <span class="comment">// 初始化节点信息</span></span><br><span class="line">            Thread.setDefaultUncaughtExceptionHandler(</span><br><span class="line">                <span class="keyword">new</span> ElasticsearchUncaughtExceptionHandler(() -&gt; Node.NODE_NAME_SETTING.get(environment.settings())));</span><br><span class="line">            <span class="comment">// 调用Bootstrap的setup方法和start方法</span></span><br><span class="line">            INSTANCE.setup(<span class="keyword">true</span>, environment);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// any secure settings must be read during node construction</span></span><br><span class="line">                IOUtils.close(keystore);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 调用Bootstrap的start方法</span></span><br><span class="line">            INSTANCE.start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (closeStandardStreams) &#123;</span><br><span class="line">                closeSysError();</span><br><span class="line">            &#125;</span><br><span class="line">            ... 略</span><br></pre></td></tr></table></figure><p>参数详解</p><ul><li>foreground：标识elasticsearch是否是作为后台守护进程启动的，</li><li>pidFile：通过parser解析args后得到，实际是解析了默认命令行参数（verbose，E,silent，version，help，quiet，daemonize，pidfile）</li><li>quiet：同上</li><li>initialEnv：Environment实例化的环境参数对象，保存了一些类似于repoFile，configFile，pluginsFile，binFile，libFile等参数。</li></ul><p>通过上述的源码阅读，我们发现在该方法中：</p><p>主要工作</p><ul><li>首先会实例化一个Bootstrap对象</li><li>配置log输出器</li><li>创建pid文件，会在磁盘上持久化一个记录应用pid的文件</li><li>通过参数foreground和quiet来控制日志输出</li><li>调用Bootstrap的setup方法和start方法</li></ul><h5 id="3-5-Bootstrap-setup-方法"><a href="#3-5-Bootstrap-setup-方法" class="headerlink" title="3.5 Bootstrap#setup()方法"></a>3.5 Bootstrap#setup()方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setup(<span class="keyword">boolean</span> addShutdownHook, Environment environment)<span class="keyword">throws</span> BootstrapException</span><br></pre></td></tr></table></figure><p>该方法主要工作</p><ul><li>通过environment生成本地插件控制器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Settings settings = environment.settings();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Spawner类是一个Environment本地插件控制器</span></span><br><span class="line">            spawner.spawnNativePluginControllers(environment);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li><p>初始化本地资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">initializeNatives(</span><br><span class="line">                environment.tmpFile(),</span><br><span class="line">                BootstrapSettings.MEMORY_LOCK_SETTING.get(settings),</span><br><span class="line">                BootstrapSettings.SYSTEM_CALL_FILTER_SETTING.get(settings),</span><br><span class="line">                BootstrapSettings.CTRLHANDLER_SETTING.get(settings));</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>在安全管理器安装之前初始化探针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initializeProbes();</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>添加关闭钩子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (addShutdownHook) &#123;</span><br><span class="line">            Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        IOUtils.close(node, spawner);</span><br><span class="line">                        LoggerContext context = (LoggerContext) LogManager.getContext(<span class="keyword">false</span>);</span><br><span class="line">                        Configurator.shutdown(context);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ElasticsearchException(<span class="string">"failed to stop node"</span>, ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>检查jar重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// look for jar hell,检查jar重复</span></span><br><span class="line">            JarHell.checkJarHell();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | URISyntaxException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>在安全管理器安装之前配置日志输出器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// install SM after natives, shutdown hooks, etc.</span></span><br><span class="line">        <span class="comment">// 安装安全管理器</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Security.configure(environment, BootstrapSettings.SECURITY_FILTER_BAD_DEFAULTS_SETTING.get(settings));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>安装安全管理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// install SM after natives, shutdown hooks, etc.</span></span><br><span class="line">        <span class="comment">// 安装安全管理器</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Security.configure(environment,               BootstrapSettings.SECURITY_FILTER_BAD_DEFAULTS_SETTING.get(settings));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BootstrapException(e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>通过参数environment实例化Node</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过参数environment实例化Node</span></span><br><span class="line">        node = <span class="keyword">new</span> Node(environment) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">validateNodeBeforeAcceptingRequests</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> Settings settings,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> BoundTransportAddress boundTransportAddress, List&lt;BootstrapCheck&gt; checks)</span> <span class="keyword">throws</span> NodeValidationException </span>&#123;</span><br><span class="line">                BootstrapChecks.check(settings, boundTransportAddress, checks);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h5 id="3-6-Bootstrap-start-方法"><a href="#3-6-Bootstrap-start-方法" class="headerlink" title="3.6 Bootstrap#start()方法"></a>3.6 Bootstrap#start()方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> NodeValidationException </span>&#123;</span><br><span class="line">       node.start();</span><br><span class="line">       keepAliveThread.start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>主要工作</p><ul><li><p>启动已经实例化的Node</p></li><li><p>启动keepAliveThread 线程，这个线程在Bootstrap初始化的时候就已经实例化了，该线程创建了一个计数为1的CountDownLatch，目的是在启动完成后能顺利添加关闭钩子，而这句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread())</span><br></pre></td></tr></table></figure><p>意思就是在jvm中增加一个关闭的钩子，当jvm关闭的时候，会执行系统中已经设置的所有通过方法addShutdownHook添加的钩子，当系统执行完这些钩子后，jvm才会关闭。所以这些钩子可以在jvm关闭的时候进行内存清理、对象销毁等操作。<br>可以看到启动的重点在setup方法中，启动过后就是Node的事了。</p><p>keepAliveThhread线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch keepAliveLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"><span class="comment">/** creates a new instance */</span></span><br><span class="line">    Bootstrap() &#123;</span><br><span class="line">        <span class="comment">// 在构造器中就创建keepAliveThread线程</span></span><br><span class="line">        keepAliveThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    keepAliveLatch.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// bail out</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"elasticsearch[keepAlive/"</span> + Version.CURRENT + <span class="string">"]"</span>);</span><br><span class="line">        keepAliveThread.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// keep this thread alive (non daemon thread) until we shutdown</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 这里的钩子执行完毕，才会执行完keepAliveThread线程的run()方法</span></span><br><span class="line">                keepAliveLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-4-Node类源码解读"><a href="#3-4-Node类源码解读" class="headerlink" title="3.4 Node类源码解读"></a>3.4 Node类源码解读</h5><p>我们先不看源码，如果是你，会怎么去设计这个Node类？会怎么去加载配置文件信息？</p><p>猜想，我们启动ES都是一个节点Node，如果是集群，会有多个Node，那么我们应该也是通过Node来加载配置文件，加载完配置文件构造一个Config对象，最后初始化一个Node对象。</p><p>继续猜想，Node应该是包含一些基本信息、全局环境配置Setting和Environment，节点环境NodeEnvironment、是否为master、是否可以参与投票等。</p><p>问题：这些信息设置完毕，如何启动、如何停止？如何加载插件？</p><p>验证猜想，查看类的定义信息</p><p><img src="F:\hexo\source\images\es\Node定义1.png" alt=":\hexo\source\images\es\Node定义1.pn"></p><p><img src="F:\hexo\source\images\es\Node定义.png" alt=":\hexo\source\images\es\Node定义.pn"></p><h6 id="3-4-1-Node初始化"><a href="#3-4-1-Node初始化" class="headerlink" title="3.4.1 Node初始化"></a>3.4.1 Node初始化</h6><p>我们前面通过分析Bootstrap#setup()方法知道，Node的实例化是在该方法中调用 new Node(environment)进行的，节点的启动是在Bootstrap#start()方法中调用Node#start()方法进行启动的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过参数environment实例化Node</span></span><br><span class="line">        node = <span class="keyword">new</span> Node(environment) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">validateNodeBeforeAcceptingRequests</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> Settings settings,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> BoundTransportAddress boundTransportAddress, List&lt;BootstrapCheck&gt; checks)</span> <span class="keyword">throws</span> NodeValidationException </span>&#123;</span><br><span class="line">                BootstrapChecks.check(settings, boundTransportAddress, checks);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>使用google的注入框架Guice的Injector进行注入与获取实例。elasticsearch里面的组件都是用上面的方法进行模块化管理，elasticsearch对guice进行了封装，通过ModulesBuilder类构建elasticsearch的模块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ModulesBuilder modules = <span class="keyword">new</span> ModulesBuilder();</span><br><span class="line">            <span class="comment">// plugin modules must be added here, before others or we can get crazy injection errors...</span></span><br><span class="line">            <span class="keyword">for</span> (Module pluginModule : pluginsService.createGuiceModules()) &#123;</span><br><span class="line">                modules.add(pluginModule);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> MonitorService monitorService = <span class="keyword">new</span> MonitorService(settings, nodeEnvironment, threadPool);</span><br><span class="line">            modules.add(<span class="keyword">new</span> NodeModule(<span class="keyword">this</span>, monitorService));</span><br><span class="line">            ClusterModule clusterModule = <span class="keyword">new</span> ClusterModule(settings, clusterService,</span><br><span class="line">                pluginsService.filterPlugins(ClusterPlugin.class));</span><br><span class="line">            modules.add(clusterModule);</span><br><span class="line">            IndicesModule indicesModule = <span class="keyword">new</span> IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));</span><br><span class="line">            modules.add(indicesModule);</span><br><span class="line"></span><br><span class="line">            SearchModule searchModule = <span class="keyword">new</span> SearchModule(settings, <span class="keyword">false</span>, pluginsService.filterPlugins(SearchPlugin.class));</span><br><span class="line">            CircuitBreakerService circuitBreakerService = createCircuitBreakerService(settingsModule.getSettings(),</span><br><span class="line">                settingsModule.getClusterSettings());</span><br><span class="line">            resourcesToClose.add(circuitBreakerService);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Node的实例化主要工作：</p><ul><li>设置初始化信息：nodeEnvironment</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            Settings tmpSettings = Settings.builder().put(environment.settings())</span><br><span class="line">                .put(Client.CLIENT_TYPE_SETTING_S.getKey(), CLIENT_TYPE).build();</span><br><span class="line"></span><br><span class="line">            tmpSettings = TribeService.processSettings(tmpSettings);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// create the node environment as soon as possible, to recover the node id and enable logging</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                nodeEnvironment = <span class="keyword">new</span> NodeEnvironment(tmpSettings, environment);</span><br><span class="line">                resourcesToClose.add(nodeEnvironment);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to create node environment"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> hadPredefinedNodeName = NODE_NAME_SETTING.exists(tmpSettings);</span><br><span class="line">            Logger logger = Loggers.getLogger(Node.class, tmpSettings);</span><br><span class="line">            <span class="keyword">final</span> String nodeId = nodeEnvironment.nodeId();</span><br><span class="line">            tmpSettings = addNodeNameIfNeeded(tmpSettings, nodeId);</span><br><span class="line">            <span class="keyword">if</span> (DiscoveryNode.nodeRequiresLocalStorage(tmpSettings)) &#123;</span><br><span class="line">                checkForIndexDataInDefaultPathData(tmpSettings, nodeEnvironment, logger);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// this must be captured after the node name is possibly added to the settings</span></span><br><span class="line">            <span class="keyword">final</span> String nodeName = NODE_NAME_SETTING.get(tmpSettings);</span><br><span class="line">            <span class="keyword">if</span> (hadPredefinedNodeName == <span class="keyword">false</span>) &#123;</span><br><span class="line">                logger.info(<span class="string">"node name [&#123;&#125;] derived from node ID [&#123;&#125;]; set [&#123;&#125;] to override"</span>, nodeName, nodeId, NODE_NAME_SETTING.getKey());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.info(<span class="string">"node name [&#123;&#125;], node ID [&#123;&#125;]"</span>, nodeName, nodeId);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><ul><li><p>打印JVM信息</p><p>​</p></li><li><p>初始化pluginsService类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.pluginsService = <span class="keyword">new</span> PluginsService(tmpSettings, environment.modulesFile(), environment.pluginsFile(), classpathPlugins);</span><br></pre></td></tr></table></figure><ul><li><p>environment(这里会加载配置文件)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.environment = <span class="keyword">new</span> Environment(<span class="keyword">this</span>.settings);</span><br><span class="line">Environment.assertEquivalent(environment, <span class="keyword">this</span>.environment);</span><br></pre></td></tr></table></figure></li><li><p>Executors 和threadPool</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;ExecutorBuilder&lt;?&gt;&gt; executorBuilders = pluginsService.getExecutorBuilders(settings);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> ThreadPool threadPool = <span class="keyword">new</span> ThreadPool(settings, executorBuilders.toArray(<span class="keyword">new</span> ExecutorBuilder[<span class="number">0</span>]));</span><br><span class="line">resourcesToClose.add(() -&gt; ThreadPool.terminate(threadPool, <span class="number">10</span>, TimeUnit.SECONDS));</span><br><span class="line"><span class="comment">// adds the context to the DeprecationLogger so that it does not need to be injected everywhere</span></span><br><span class="line">DeprecationLogger.setThreadContext(threadPool.getThreadContext());</span><br><span class="line">resourcesToClose.add(() -&gt; DeprecationLogger.removeThreadContext(threadPool.getThreadContext()));</span><br></pre></td></tr></table></figure><p>我们来看es线程池做了什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPool</span><span class="params">(<span class="keyword">final</span> Settings settings, <span class="keyword">final</span> ExecutorBuilder&lt;?&gt;... customBuilders)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(settings);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> Node.NODE_NAME_SETTING.exists(settings);</span><br><span class="line">        <span class="comment">// 将构造好的线程池添加到HashMap中，key是线程池的名称，value是ExecutorBuilder</span></span><br><span class="line">        <span class="comment">// 每一个线程都是通过ExecutorBuilder来构造</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, ExecutorBuilder&gt; builders = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> availableProcessors = EsExecutors.boundedNumberOfProcessors(settings);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfProcMaxAt5 = halfNumberOfProcessorsMaxFive(availableProcessors);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfProcMaxAt10 = halfNumberOfProcessorsMaxTen(availableProcessors);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> genericThreadPoolMax = boundedBy(<span class="number">4</span> * availableProcessors, <span class="number">128</span>, <span class="number">512</span>);</span><br><span class="line">        builders.put(Names.GENERIC, <span class="keyword">new</span> ScalingExecutorBuilder(Names.GENERIC, <span class="number">4</span>, genericThreadPoolMax, TimeValue.timeValueSeconds(<span class="number">30</span>)));</span><br><span class="line">        builders.put(Names.INDEX, <span class="keyword">new</span> FixedExecutorBuilder(settings, Names.INDEX, availableProcessors, <span class="number">200</span>));</span><br><span class="line">        builders.put(Names.BULK, <span class="keyword">new</span> FixedExecutorBuilder(settings, Names.BULK, availableProcessors, <span class="number">200</span>)); <span class="comment">// now that we reuse bulk for index/delete ops</span></span><br><span class="line">        builders.put(Names.GET, <span class="keyword">new</span> FixedExecutorBuilder(settings, Names.GET, availableProcessors, <span class="number">1000</span>));</span><br><span class="line">        builders.put(Names.SEARCH, <span class="keyword">new</span> FixedExecutorBuilder(settings, Names.SEARCH, searchThreadPoolSize(availableProcessors), <span class="number">1000</span>));</span><br><span class="line">        builders.put(Names.MANAGEMENT, <span class="keyword">new</span> ScalingExecutorBuilder(Names.MANAGEMENT, <span class="number">1</span>, <span class="number">5</span>, TimeValue.timeValueMinutes(<span class="number">5</span>)));</span><br><span class="line">        <span class="comment">// no queue as this means clients will need to handle rejections on listener queue even if the operation succeeded</span></span><br><span class="line">        <span class="comment">// the assumption here is that the listeners should be very lightweight on the listeners side</span></span><br><span class="line">        builders.put(Names.LISTENER, <span class="keyword">new</span> FixedExecutorBuilder(settings, Names.LISTENER, halfProcMaxAt10, -<span class="number">1</span>));</span><br><span class="line">        builders.put(Names.FLUSH, <span class="keyword">new</span> ScalingExecutorBuilder(Names.FLUSH, <span class="number">1</span>, halfProcMaxAt5, TimeValue.timeValueMinutes(<span class="number">5</span>)));</span><br><span class="line">        builders.put(Names.REFRESH, <span class="keyword">new</span> ScalingExecutorBuilder(Names.REFRESH, <span class="number">1</span>, halfProcMaxAt10, TimeValue.timeValueMinutes(<span class="number">5</span>)));</span><br><span class="line">        builders.put(Names.WARMER, <span class="keyword">new</span> ScalingExecutorBuilder(Names.WARMER, <span class="number">1</span>, halfProcMaxAt5, TimeValue.timeValueMinutes(<span class="number">5</span>)));</span><br><span class="line">        builders.put(Names.SNAPSHOT, <span class="keyword">new</span> ScalingExecutorBuilder(Names.SNAPSHOT, <span class="number">1</span>, halfProcMaxAt5, TimeValue.timeValueMinutes(<span class="number">5</span>)));</span><br><span class="line">        builders.put(Names.FETCH_SHARD_STARTED, <span class="keyword">new</span> ScalingExecutorBuilder(Names.FETCH_SHARD_STARTED, <span class="number">1</span>, <span class="number">2</span> * availableProcessors, TimeValue.timeValueMinutes(<span class="number">5</span>)));</span><br><span class="line">        builders.put(Names.FORCE_MERGE, <span class="keyword">new</span> FixedExecutorBuilder(settings, Names.FORCE_MERGE, <span class="number">1</span>, -<span class="number">1</span>));</span><br><span class="line">        builders.put(Names.FETCH_SHARD_STORE, <span class="keyword">new</span> ScalingExecutorBuilder(Names.FETCH_SHARD_STORE, <span class="number">1</span>, <span class="number">2</span> * availableProcessors, TimeValue.timeValueMinutes(<span class="number">5</span>)));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> ExecutorBuilder&lt;?&gt; builder : customBuilders) &#123;</span><br><span class="line">            <span class="keyword">if</span> (builders.containsKey(builder.name())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"builder with name ["</span> + builder.name() + <span class="string">"] already exists"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            builders.put(builder.name(), builder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.builders = Collections.unmodifiableMap(builders);</span><br><span class="line"></span><br><span class="line">        threadContext = <span class="keyword">new</span> ThreadContext(settings);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, ExecutorHolder&gt; executors = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="keyword">final</span> Map.Entry&lt;String, ExecutorBuilder&gt; entry : builders.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">final</span> ExecutorBuilder.ExecutorSettings executorSettings = entry.getValue().getSettings(settings);</span><br><span class="line">            <span class="keyword">final</span> ExecutorHolder executorHolder = entry.getValue().build(executorSettings, threadContext);</span><br><span class="line">            <span class="keyword">if</span> (executors.containsKey(executorHolder.info.getName())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"duplicate executors with name ["</span> + executorHolder.info.getName() + <span class="string">"] registered"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            logger.debug(<span class="string">"created thread pool: &#123;&#125;"</span>, entry.getValue().formatInfo(executorHolder.info));</span><br><span class="line">            executors.put(entry.getKey(), executorHolder);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executors.put(Names.SAME, <span class="keyword">new</span> ExecutorHolder(DIRECT_EXECUTOR, <span class="keyword">new</span> Info(Names.SAME, ThreadPoolType.DIRECT)));</span><br><span class="line">        <span class="keyword">this</span>.executors = unmodifiableMap(executors);</span><br><span class="line">        <span class="comment">// 最后创建一个1线程的scheduler来执行定时任务</span></span><br><span class="line">        <span class="keyword">this</span>.scheduler = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>, EsExecutors.daemonThreadFactory(settings, <span class="string">"scheduler"</span>), <span class="keyword">new</span> EsAbortPolicy());</span><br><span class="line">        <span class="keyword">this</span>.scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.scheduler.setRemoveOnCancelPolicy(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        TimeValue estimatedTimeInterval = ESTIMATED_TIME_INTERVAL_SETTING.get(settings);</span><br><span class="line">        <span class="comment">// 最后创建一个执行timer的线程</span></span><br><span class="line">        <span class="keyword">this</span>.cachedTimeThread = <span class="keyword">new</span> CachedTimeThread(EsExecutors.threadName(settings, <span class="string">"[timer]"</span>), estimatedTimeInterval.millis());</span><br><span class="line">        <span class="keyword">this</span>.cachedTimeThread.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>原来在ES的threadPool中，根据不同的类型分别分配了不同线程数的一个线程池，而executor由一个executorBuilder来提供，所以submit task的时候也需要指定不同的Name。最后创建一个1线程的scheduler来执行定时任务。最后创建一个执行timer的线程。</p><p>再继续往下看Node的构造方法就会看到接下来会new 一堆的services和modules，这里就不一一过了，其共性就是都会绑定刚刚创建的threadPool，已经也会绑定必要的services，某些module本身具有后台线程的话，初始化完成需要调用<code>.start()</code>去启动这些后台线程。</p><ul><li>初始化modules实例，通过Guice的Injector进行注入各个Module实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">ModulesBuilder modules = <span class="keyword">new</span> ModulesBuilder();</span><br><span class="line">***</span><br><span class="line">modules.add(b -&gt; &#123;</span><br><span class="line">                    b.bind(NodeService.class).toInstance(nodeService);</span><br><span class="line">                    b.bind(NamedXContentRegistry.class).toInstance(xContentRegistry);</span><br><span class="line">                    b.bind(PluginsService.class).toInstance(pluginsService);</span><br><span class="line">                    b.bind(Client.class).toInstance(client);</span><br><span class="line">                    b.bind(NodeClient.class).toInstance(client);</span><br><span class="line">                    b.bind(Environment.class).toInstance(<span class="keyword">this</span>.environment);</span><br><span class="line">                    b.bind(ThreadPool.class).toInstance(threadPool);</span><br><span class="line">                    b.bind(NodeEnvironment.class).toInstance(nodeEnvironment);</span><br><span class="line">                    b.bind(TribeService.class).toInstance(tribeService);</span><br><span class="line">                    b.bind(ResourceWatcherService.class).toInstance(resourceWatcherService);</span><br><span class="line">                    b.bind(CircuitBreakerService.class).toInstance(circuitBreakerService);</span><br><span class="line">                    b.bind(BigArrays.class).toInstance(bigArrays);</span><br><span class="line">                    b.bind(ScriptService.class).toInstance(scriptModule.getScriptService());</span><br><span class="line">                    b.bind(AnalysisRegistry.class).toInstance(analysisModule.getAnalysisRegistry());</span><br><span class="line">                    b.bind(IngestService.class).toInstance(ingestService);</span><br><span class="line">                    b.bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry);</span><br><span class="line">                    b.bind(MetaDataUpgrader.class).toInstance(metaDataUpgrader);</span><br><span class="line">                    b.bind(MetaStateService.class).toInstance(metaStateService);</span><br><span class="line">                    b.bind(IndicesService.class).toInstance(indicesService);</span><br><span class="line">                    b.bind(SearchService.class).toInstance(newSearchService(clusterService, indicesService,</span><br><span class="line">                        threadPool, scriptModule.getScriptService(), bigArrays, searchModule.getFetchPhase()));</span><br><span class="line">                    b.bind(SearchTransportService.class).toInstance(searchTransportService);</span><br><span class="line">                    b.bind(SearchPhaseController.class).toInstance(<span class="keyword">new</span> SearchPhaseController(settings, bigArrays,</span><br><span class="line">                            scriptModule.getScriptService()));</span><br><span class="line">                    b.bind(Transport.class).toInstance(transport);</span><br><span class="line">                    b.bind(TransportService.class).toInstance(transportService);</span><br><span class="line">                    b.bind(NetworkService.class).toInstance(networkService);</span><br><span class="line">                    b.bind(UpdateHelper.class).toInstance(<span class="keyword">new</span> UpdateHelper(settings, scriptModule.getScriptService()));</span><br><span class="line">                    b.bind(MetaDataIndexUpgradeService.class).toInstance(<span class="keyword">new</span> MetaDataIndexUpgradeService(settings, xContentRegistry,</span><br><span class="line">                        indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), indexMetaDataUpgraders));</span><br><span class="line">                    b.bind(ClusterInfoService.class).toInstance(clusterInfoService);</span><br><span class="line">                    b.bind(Discovery.class).toInstance(discoveryModule.getDiscovery());</span><br><span class="line">                    &#123;</span><br><span class="line">                        RecoverySettings recoverySettings = <span class="keyword">new</span> RecoverySettings(settings, settingsModule.getClusterSettings());</span><br><span class="line">                        processRecoverySettings(settingsModule.getClusterSettings(), recoverySettings);</span><br><span class="line">                        b.bind(PeerRecoverySourceService.class).toInstance(<span class="keyword">new</span> PeerRecoverySourceService(settings, transportService,</span><br><span class="line">                                indicesService, recoverySettings, clusterService));</span><br><span class="line">                        b.bind(PeerRecoveryTargetService.class).toInstance(<span class="keyword">new</span> PeerRecoveryTargetService(settings, threadPool,</span><br><span class="line">                                transportService, recoverySettings, clusterService));</span><br><span class="line">                    &#125;</span><br><span class="line">                    httpBind.accept(b);</span><br><span class="line">                    pluginComponents.stream().forEach(p -&gt; b.bind((Class) p.getClass()).toInstance(p));</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">            injector = modules.createInjector();</span><br></pre></td></tr></table></figure><p>这里面会注入Discovery，ClusterService，Transport Service，还创建了NodeClient用来接收全部其他节点请求。这些都会在往后重点剖析。</p><h6 id="3-4-2-启动Node"><a href="#3-4-2-启动Node" class="headerlink" title="3.4.2 启动Node"></a>3.4.2 启动Node</h6><p>通过在Bootstrap#start()方法中调用Node.start()来启动节点</p><p>我们知道，在Node的初始化方法中，Model组件会被添加到绑定的线程当中，那么启动这些只需要调用相应组件的.start()方法即可完成组件的加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> NodeValidationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!lifecycle.moveToStarted()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Logger logger = Loggers.getLogger(Node.class, NODE_NAME_SETTING.get(settings));</span><br><span class="line">        logger.info(<span class="string">"starting ..."</span>);</span><br><span class="line">        <span class="comment">// hack around dependency injection problem (for now...)</span></span><br><span class="line">        injector.getInstance(Discovery.class).setAllocationService(injector.getInstance(AllocationService.class));</span><br><span class="line">        pluginLifecycleComponents.forEach(LifecycleComponent::start);</span><br><span class="line"></span><br><span class="line">        injector.getInstance(MappingUpdatedAction.class).setClient(client);</span><br><span class="line">        injector.getInstance(IndicesService.class).start();</span><br><span class="line">        injector.getInstance(IndicesClusterStateService.class).start();</span><br><span class="line">        injector.getInstance(IndicesTTLService.class).start();</span><br><span class="line">        injector.getInstance(SnapshotsService.class).start();</span><br><span class="line">        injector.getInstance(SnapshotShardsService.class).start();</span><br><span class="line">        injector.getInstance(RoutingService.class).start();</span><br><span class="line">        injector.getInstance(SearchService.class).start();</span><br><span class="line">        injector.getInstance(MonitorService.class).start();</span><br></pre></td></tr></table></figure><p>3.4.3 Node节点停止</p><p>该方法跟node启动差不多，也是调用相关组件的stop方法即可，这里就不再分析了</p><h6 id="3-4-4-加载配置文件信息"><a href="#3-4-4-加载配置文件信息" class="headerlink" title="3.4.4 加载配置文件信息"></a>3.4.4 加载配置文件信息</h6><ul><li>入口</li></ul><p>通过Node的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Settings preparedSettings)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>(InternalSettingsPreparer.prepareEnvironment(preparedSettings, <span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是加载配置文件的入口，它有三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Settings <span class="title">prepareSettings</span><span class="params">(Settings input)</span> </span>&#123;</span><br><span class="line">        Settings.Builder output = Settings.builder();</span><br><span class="line">        initializeSettings(output, input, Collections.emptyMap());</span><br><span class="line">        finalizeSettings(output, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> output.build();</span><br><span class="line">    &#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Environment <span class="title">prepareEnvironment</span><span class="params">(Settings input, Terminal terminal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prepareEnvironment(input, terminal, Collections.emptyMap());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Environment <span class="title">prepareEnvironment</span><span class="params">(Settings input, Terminal terminal, Map&lt;String, String&gt; properties)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在InternalSettingsPreparer类的prepareEnvironment(org.elasticsearch.common.settings.Settings, org.elasticsearch.cli.Terminal, java.util.Map&lt;java.lang.String,java.lang.String&gt;, java.nio.file.Path)方法中进行了配置文件的加载。</p><ul><li><p>加载配置文件的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Environment <span class="title">prepareEnvironment</span><span class="params">(Settings input, Terminal terminal, Map&lt;String, String&gt; properties)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// just create enough settings to build the environment, to get the config dir</span></span><br><span class="line">        Settings.Builder output = Settings.builder();</span><br><span class="line">        <span class="comment">// 初始化输入输出流信息</span></span><br><span class="line">        initializeSettings(output, input, properties);</span><br><span class="line">        <span class="comment">// 构造Environment实例</span></span><br><span class="line">        Environment environment = <span class="keyword">new</span> Environment(output.build());</span><br><span class="line">        <span class="comment">// 这个很关键，保证elasticsearch.yml文件中配置的日志路径path.logs生效</span></span><br><span class="line">        output = Settings.builder(); <span class="comment">// start with a fresh output</span></span><br><span class="line">        <span class="keyword">boolean</span> settingsFileFound = <span class="keyword">false</span>;</span><br><span class="line">        Set&lt;String&gt; foundSuffixes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String allowedSuffix : ALLOWED_SUFFIXES) &#123;</span><br><span class="line">            Path path = environment.configFile().resolve(<span class="string">"elasticsearch"</span> + allowedSuffix);</span><br><span class="line">            <span class="keyword">if</span> (Files.exists(path)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!settingsFileFound) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        output.loadFromPath(path);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> SettingsException(<span class="string">"Failed to load settings from "</span> + path.toString(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                settingsFileFound = <span class="keyword">true</span>;</span><br><span class="line">                foundSuffixes.add(allowedSuffix);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (foundSuffixes.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SettingsException(<span class="string">"multiple settings files found with suffixes: "</span></span><br><span class="line">                + Strings.collectionToDelimitedString(foundSuffixes, <span class="string">","</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// re-initialize settings now that the config file has been loaded</span></span><br><span class="line">        initializeSettings(output, input, properties);</span><br><span class="line">        finalizeSettings(output, terminal);</span><br><span class="line">        <span class="comment">// 再次获取Environment实例</span></span><br><span class="line">        environment = <span class="keyword">new</span> Environment(output.build());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// we put back the path.logs so we can use it in the logging configuration file</span></span><br><span class="line">        output.put(Environment.PATH_LOGS_SETTING.getKey(), cleanPath(environment.logsFile().toAbsolutePath().toString()));</span><br><span class="line">        String configExtension = foundSuffixes.isEmpty() ? <span class="keyword">null</span> : foundSuffixes.iterator().next();</span><br><span class="line">        <span class="comment">// 返回Environment实例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Environment(output.build(), configExtension);</span><br></pre></td></tr></table></figure><p>构建一个默认的Settings的实例</p><p>然后用构造出来的新的Settings来加载给定或默认路径下的<em>elasticsearch.yml</em></p><p>然后将方法接受的参数Settings实例也加载到这个新的Settings中。</p><p>最后才将日志文件的路径加载进Settings中，这样就保证了<em>elasticsearch.yml</em>文件中配置的日志路径<em>path.logs</em>生效（覆盖该方法参数中的配置）。</p><p>最后返回一个Environment的实例，使得Node开始构建</p></li></ul><h4 id="四、总结："><a href="#四、总结：" class="headerlink" title="四、总结："></a>四、总结：</h4><p>通过上述的源码分析，我们知道Elasticsearch节点启动的入口是Elasticsearch#main()方法，在该方法中会进行一些安全管理的设置，去调用Command的main()方法，整个方法执行没有任何异常，则返回ok状态。</p><p>Command#main()：会去添加一些钩子、配置日志输出、调用mainWithoutErrorHandling()去执行EnvironmentAwareCommand#execute(terminal, options)方法。</p><p>EnvironmentAwareCommand#execute(terminal, options)方法：只是将配置信息设置到HashMap中，检查了elasticsearch的参数path.conf、path.data、path.home、path.logs，最后调用Elasticsearch#execute()方法，execute(terminal, options, createEnv(terminal, settings))会先调用EnvironmentAwareCommand# createEnv(terminal, settings)</p><p>Elasticsearch#execute()方法：主要是处理参数，调用init(daemonize, pidFile, quiet, env)，真正执行启动的是Bootstrap.init(!daemonize, pidFile, quiet, initialEnv)方法。</p><p>Bootstrap.init(!daemonize, pidFile, quiet, initialEnv)：主要是调用setup()方法和start()方法，在setup()方法中主要通过environment生成本地插件控制器spawner、添加钩子、添加安全管理器、检查jar包、创建Node节点。而start()通过启动初始化好的Node和keepAliveThread线程，这个keepAliveThread使用了CountdownLatch计数器为1来保证钩子一定能够关闭。</p><p>Node类的初始化：通过设置好的environment来初始化节点，设置nodEnvironment、Environment、设置Node_name、设置线程池（其实是一个HashMap&lt;String,ExecutorBuilder&gt;） ，根据不同的类型分别分配了不同线程数的一个线程池。将创建好的module绑定到创建的ThreadPool。</p><p>大致的时序图如下：</p><p><img src="F:\hexo\source\images\es\Elasticsearch源码启动时序图.png" alt=":\hexo\source\images\es\Elasticsearch源码启动时序图.pn"></p><p>现在还遗留着几个问题：</p><ul><li>怎么进行master选举</li><li>怎么进行节点监控</li></ul><p>留到下一篇再进行分析。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于最近半年来一直在使用Elasticsearch来做全文检索和ELK统一日志工作，对于ES还是觉得需要细细研究，才能感受到它的魅力，才能有所提高。&lt;/p&gt;
&lt;p&gt;我们先提出几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动入口在哪个类？&lt;/li&gt;
&lt;li&gt;启动需要做哪些初始化工作
      
    
    </summary>
    
      <category term="Elasticsearch源码分析专题" scheme="http://yoursite.com/categories/Elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>elasticsearch源码分析(一)--整体架构</title>
    <link href="http://yoursite.com/2018/05/26/elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%B8%80)--%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2018/05/26/elasticsearch源码分析(一)--整体架构/</id>
    <published>2018-05-26T04:12:57.000Z</published>
    <updated>2018-06-20T01:01:25.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、源码主要模块"><a href="#一、源码主要模块" class="headerlink" title="一、源码主要模块"></a>一、源码主要模块</h1><p>我下载的Elasticsearch的源码版本为5.6.4</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/es01.png" alt="es整体结构"></p><p>从上图来看：Elasticsearch主要包含以下几个模块</p><p>distribution：elasticsearch的打包发行相关，将elasticsearch打成各种发行包（zip，deb，rpm，tar）的模块。具体用法如是，在相应的发行版本模块下执行publishToMavenLocal这个Task，如果执行成功的话就会在路径build/distributions下生成对应的发行包，这种打好的包就能在生产服务器上运行。如果自己修改了源码，打包时就需要用到该模块了。</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/es02-2.png" alt=":\我的资料\ELK日志监控\es源码分析\distribution整体架构.pn"></p><p><img src="G:\我的资料\ELK日志监控\es源码分析\distribution整体架构-打包zip.png" alt=":\我的资料\ELK日志监控\es源码分析\distribution整体架构-打包zip.pn"></p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/es02-3.png" alt=":\我的资料\ELK日志监控\es源码分析\distribution整体架构-打包zip成功.pn"></p><p>core：核心包，elasticsearch的源码主要在这个里面，Elasticsearch索引管理、集群管理、服务发现、查询、对Lucene操作的封装等都位于该模块</p><p>buildSrc：elasticsearch的构建相关的代码，gradle相关依赖配置都在改模块下</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/buildSrc%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt=":\我的资料\ELK日志监控\es源码分析\buildSrc整体架构.pn"></p><p>client：作为连接elasticsearch的客户端相关代码，它提供了Rest方式（基于Http）、transport （Java Netty内部的通信方式）等方式。</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/client%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt=":\我的资料\ELK日志监控\es源码分析\client整体架构.pn"></p><p>modules：作为elasticsearch除核心外的必备模块相关代码,比如对Netty的封装、父子类查询、重建索引</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/modules%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt=":\我的资料\ELK日志监控\es源码分析\modules整体架构.pn"></p><p>plugins：作为elasticsearch必备的插件的相关代码，丰富ES的相关功能，比如IK分词器插件、mapper-attachments/ingest-attachment文件处理插件。</p><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/plugings%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt=":\我的资料\ELK日志监控\es源码分析\plugings整体架构.pn"></p><h1 id="二、Elasticsearch整体架构图"><a href="#二、Elasticsearch整体架构图" class="headerlink" title="二、Elasticsearch整体架构图"></a>二、Elasticsearch整体架构图</h1><p><img src="https://github.com/Zhanggdong/Zhanggdong.github.io/raw/master/images/es/ES%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt=":\我的资料\ELK日志监控\es源码分析\ES架构图.pn"></p><p>服务发现以及选主 ZenDiscovery</p><p>恢复以及容灾</p><p>搜索引擎 Search</p><p>ClusterState</p><p>网络层</p><p>Rest 和 RPC</p><p>线程池</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、源码主要模块&quot;&gt;&lt;a href=&quot;#一、源码主要模块&quot; class=&quot;headerlink&quot; title=&quot;一、源码主要模块&quot;&gt;&lt;/a&gt;一、源码主要模块&lt;/h1&gt;&lt;p&gt;我下载的Elasticsearch的源码版本为5.6.4&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;
      
    
    </summary>
    
      <category term="Elasticsearch源码分析专题" scheme="http://yoursite.com/categories/Elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch源码阅读环境搭建(一)</title>
    <link href="http://yoursite.com/2018/05/26/elasticsearch%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/05/26/elasticsearch源码环境搭建/</id>
    <published>2018-05-26T04:12:57.000Z</published>
    <updated>2018-06-20T00:26:41.887Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Elasticsearch源码分析专题" scheme="http://yoursite.com/categories/Elasticsearch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%93%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis面试题整理</title>
    <link href="http://yoursite.com/2018/05/26/redis/"/>
    <id>http://yoursite.com/2018/05/26/redis/</id>
    <published>2018-05-26T04:12:57.000Z</published>
    <updated>2018-06-20T01:13:19.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、Redis为什么单线程的，能说说它的原理吗"><a href="#1、Redis为什么单线程的，能说说它的原理吗" class="headerlink" title="1、Redis为什么单线程的，能说说它的原理吗"></a>1、Redis为什么单线程的，能说说它的原理吗</h3><p>Redis使用了单线程架构和I/O多路复用模型来实现高性能的内存数据库服务。Redis使用了单线程架构，预防了多线程可能产生的竞争问题，但是也会引入另外的问题。Redis单线程架构导致无法充分利用CPU多核特性，通常的做法是在一台机器上部署多个Redis实例。</p><p>那么Redis使用单线程模型，为什么还那么快：</p><p>第一，纯内存访问，Redis将所有数据放在内存中，内存的响应时长大约为100纳秒，这是Redis达到每秒万级别访问的重要基础。<br>第二，非阻塞I/O，Redis使用epoll作为I/O多路复用技术的实现，再加上Redis自身的事件处理模型将epoll中的连接、读写、关闭都转换为事件，不在网络I/O上浪费过多的时间。</p><p>第三，单线程避免了线程切换和竞态产生的消耗。</p><h3 id="2、mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"><a href="#2、mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据" class="headerlink" title="2、mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"></a>2、mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</h3><p>Redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 6种数据淘汰策略：</p><ul><li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li><li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li><li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li><li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li><li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li><li>no-enviction（驱逐）：禁止驱逐数据</li></ul><h3 id="3、缓存穿透可以介绍⼀一下么？你认为应该如何解决这个问题"><a href="#3、缓存穿透可以介绍⼀一下么？你认为应该如何解决这个问题" class="headerlink" title="3、缓存穿透可以介绍⼀一下么？你认为应该如何解决这个问题"></a>3、缓存穿透可以介绍⼀一下么？你认为应该如何解决这个问题</h3><p>缓存穿透是指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库中查询。</p><p>解决思路：</p><p>1，如果查询<a href="http://cpro.baidu.com/cpro/ui/uijs.php?adclass=0&amp;app_id=0&amp;c=news&amp;cf=1001&amp;ch=0&amp;di=128&amp;fv=17&amp;is_app=0&amp;jk=9d81f77002e20c6d&amp;k=%CA%FD%BE%DD%BF%E2&amp;k0=%CA%FD%BE%DD%BF%E2&amp;kdi0=0&amp;luki=7&amp;mcpm=0&amp;n=10&amp;p=baidu&amp;q=smileking_cpr&amp;rb=0&amp;rs=1&amp;seller_id=1&amp;sid=6d0ce20270f7819d&amp;ssp2=1&amp;stid=9&amp;t=tpclicked3_hc&amp;td=1682280&amp;tu=u1682280&amp;u=http%3A%2F%2Fwww.th7.cn%2Fdb%2Fnosql%2F201510%2F136276.shtml&amp;urlid=0" target="_blank" rel="noopener">数据库</a>也为空，直接设置一个默认值存放到缓存，这样第二次到缓冲中获取就有值了，而不会继续访问数据库，这种办法最简单粗暴。</p><p>2，根据缓存数据Key的规则。例如我们公司是做机顶盒的，缓存数据以Mac为Key，Mac是有规则，如果不符合规则就过滤掉，这样可以过滤一部分查询。在做缓存规划的时候，Key有一定规则的话，可以采取这种办法。这种办法只能缓解一部分的压力，过滤和系统无关的查询，但是无法根治。</p><p>3，采用布隆<a href="http://cpro.baidu.com/cpro/ui/uijs.php?adclass=0&amp;app_id=0&amp;c=news&amp;cf=1001&amp;ch=0&amp;di=128&amp;fv=17&amp;is_app=0&amp;jk=9d81f77002e20c6d&amp;k=%B9%FD%C2%CB%C6%F7&amp;k0=%B9%FD%C2%CB%C6%F7&amp;kdi0=0&amp;luki=6&amp;mcpm=0&amp;n=10&amp;p=baidu&amp;q=smileking_cpr&amp;rb=0&amp;rs=1&amp;seller_id=1&amp;sid=6d0ce20270f7819d&amp;ssp2=1&amp;stid=9&amp;t=tpclicked3_hc&amp;td=1682280&amp;tu=u1682280&amp;u=http%3A%2F%2Fwww.th7.cn%2Fdb%2Fnosql%2F201510%2F136276.shtml&amp;urlid=0" target="_blank" rel="noopener">过滤器</a>，将所有可能存在的数据哈希到一个足够大的BitSet中，不存在的数据将会被拦截掉，从而避免了对<a href="http://cpro.baidu.com/cpro/ui/uijs.php?adclass=0&amp;app_id=0&amp;c=news&amp;cf=1001&amp;ch=0&amp;di=128&amp;fv=17&amp;is_app=0&amp;jk=9d81f77002e20c6d&amp;k=%B5%D7%B2%E3&amp;k0=%B5%D7%B2%E3&amp;kdi0=0&amp;luki=2&amp;mcpm=0&amp;n=10&amp;p=baidu&amp;q=smileking_cpr&amp;rb=0&amp;rs=1&amp;seller_id=1&amp;sid=6d0ce20270f7819d&amp;ssp2=1&amp;stid=9&amp;t=tpclicked3_hc&amp;td=1682280&amp;tu=u1682280&amp;u=http%3A%2F%2Fwww.th7.cn%2Fdb%2Fnosql%2F201510%2F136276.shtml&amp;urlid=0" target="_blank" rel="noopener">底层</a>存储系统的查询压力。关于布隆<a href="http://cpro.baidu.com/cpro/ui/uijs.php?adclass=0&amp;app_id=0&amp;c=news&amp;cf=1001&amp;ch=0&amp;di=128&amp;fv=17&amp;is_app=0&amp;jk=9d81f77002e20c6d&amp;k=%B9%FD%C2%CB%C6%F7&amp;k0=%B9%FD%C2%CB%C6%F7&amp;kdi0=0&amp;luki=6&amp;mcpm=0&amp;n=10&amp;p=baidu&amp;q=smileking_cpr&amp;rb=0&amp;rs=1&amp;seller_id=1&amp;sid=6d0ce20270f7819d&amp;ssp2=1&amp;stid=9&amp;t=tpclicked3_hc&amp;td=1682280&amp;tu=u1682280&amp;u=http%3A%2F%2Fwww.th7.cn%2Fdb%2Fnosql%2F201510%2F136276.shtml&amp;urlid=0" target="_blank" rel="noopener">过滤器</a>，详情查看：基于BitSet的布隆过滤器(Bloom Filter) </p><p>大并发的缓存穿透会导致缓存雪崩。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、Redis为什么单线程的，能说说它的原理吗&quot;&gt;&lt;a href=&quot;#1、Redis为什么单线程的，能说说它的原理吗&quot; class=&quot;headerlink&quot; title=&quot;1、Redis为什么单线程的，能说说它的原理吗&quot;&gt;&lt;/a&gt;1、Redis为什么单线程的，能说
      
    
    </summary>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Redis/"/>
    
    
  </entry>
  
</feed>
